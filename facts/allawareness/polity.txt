<!DOCTYPE html>
<html lang="en">
<head> 
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Polity QUIZ APP</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <style>
        body {
           font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
font-weight: bold;
        }
body {
	position: relative;
    margin: 15px;
    padding: 2px;
    font-family: 'Arial', sans-serif;
    background-color: ; /* Medium green color */
    color: #000; /* Set text color to deep black */
    font-weight: bold; /* Make the font bold */
    overflow-x: hidden;
    /* Adding a blurred background with medium green color */
}
    h1 {
      text-align: center;
      color: #333;
    }

    label {
      font-weight: bold;
    }

button {
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: ;
      color: white;
    }

    .btn-primary {
      background-color: ;
    }

    .btn-success {
      background-color: ;
    }

    .btn-primary:hover {
      background-color: ;
    }

    .btn-success:hover {
      background-color: #218838;
    }

    .btn-container {
      display: flex;
      justify-content: space-between;
      margin-top: 20px;
    }

    .btn-container button {
      flex: 1;
      margin: 0 5px;
    }

    input[type="number"] {
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ccc;
      width: 80px;
    }
 #totalQuestions {
      position: fixed;
      bottom: 10px;
      left: 50px;
      transform: translateX(-50%);
      background-color: #fff;
      padding: 5px 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      z-index: 1000; /* Ensure it's above other content */
    }

.sidebar {
  height: 100%;
  margin-top: 70px;
  width: 250px;
  position: fixed; /* Change position to fixed */
  top: 0;
  left: -250px; /* Move sidebar off-screen initially */
  background-color: #f2f2f2;
  overflow-x: hidden;
  padding-top: 20px;
  transition: 0.5s;
  z-index: 1; /* Ensure the sidebar is above the content */
}
.sidebar a {
  padding: 10px 15px;
  text-decoration: none;
  font-size: 20px;
  display: block;
  transition: 0.1s;
}
.sidebar a:hover {
  background-color: #ddd;
}
.container {
  padding-left: 0; /* Remove padding from the container */
  transition: 0.5s;
}
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: ;
  padding: 10px;
  z-index: 2; /* Ensure the navbar is above the sidebar */
}
	    /* Dark mode styles */
body.dark-mode {
    background-color: #333;
    color: #fff;
}

.headerbar {
		background: orange;
		color: #FFF;
		line-height: 30px;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		height: 70px;
		z-index: 1000;
		}
.headerbar a {text-decoration: none;color: #FFF;}

.navbot {
  background: gray;
  color: #FFF;
  line-height: 30px;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 50px;
  z-index: 1000;
  display: flex;
  justify-content: center;
  align-items: center;
}
  </style>
</head>
<body> 

	
<div class="container">
  <div class="navbar"><header class="headerbar"> <p> <a class="navbar-toggle menu" onclick="toggleSidebar()" style="font-size: 40px; margin-top: 10px; margin-left: 05px;"><b>‚ò∞</b></a><li id="totalQuestions" style="background: grey; color: white;">Questions : <span id="totalQuestionCount"></span></li></p></header>
  <div id="sidebar" class="sidebar">
<a style="text-align: left; background: lightblue; font-size: 20px; color: grey;">‚úêGangaTricks¬†¬†¬†¬†¬†¬†<button class="navbar-toggle" onclick="toggleSidebar()" style="font-size: 25px; padding: 00px;">‚ùé</button></a>    
<a href="#" onclick="goToWebsite()">Home üè†</a>
    <a href="#" onclick="goToHub()">Awareness</a>
    <a href="#" onclick="goToEnglish()">English</a>
    <a href="#" onclick="examQuiz()">ExamQuiz</a>
    <a href="https://gangatricks.github.io/0/">Exit Quiz</a>
    <a href="http://www.youtube.com/@gangatricks"><img src="../../photo.jpg" width="250" height="200"></a>
<div class="container">
        <h3 style="text-align: right;">Tools</h3>
        <button onclick="toggleDarkMode()" style="color: white; item-align: right; background: black; border: 2px solid white;">Dark Mode</button>
    </div>
  </div>
</div>
<script>
	// Function to toggle dark mode
function toggleDarkMode() {
    const body = document.body;
    const isDarkMode = body.classList.contains('dark-mode');
    
    // Toggle the class and set the cookie
    if (isDarkMode) {
        body.classList.remove('dark-mode');
        setDarkModeCookie(false); // Set cookie to false (light mode)
    } else {
        body.classList.add('dark-mode');
        setDarkModeCookie(true); // Set cookie to true (dark mode)
    }
}

// Function to set the dark mode cookie
function setDarkModeCookie(isDarkMode) {
    document.cookie = `darkMode=${isDarkMode}; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/`;
}

// Function to check if dark mode preference is stored in the cookie and apply it
function applyDarkModeFromCookie() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'darkMode' && value === 'true') {
            document.body.classList.add('dark-mode');
            return;
        }
    }
}

// Apply dark mode preference from the cookie on page load
applyDarkModeFromCookie();

function toggleSidebar() {
  var sidebar = document.getElementById("sidebar");
  if (sidebar.style.left === "-250px") {
    sidebar.style.left = "0";
  } else {
    sidebar.style.left = "-250px";
  }
}

 function goToHub() {
        // Change 'https://example.com' to the actual URL you want to redirect to
        window.location.href = '../../awareness/awareness1.html';
    }

  function goToWebsite() {
        // Change 'https://example.com' to the actual URL you want to redirect to
        window.location.href = '../../index.html';
    }
 function examQuiz() {
        // Change 'https://example.com' to the actual URL you want to redirect to
        window.location.href = '../../examquiz/examquiz.html';
    }

 function goToEnglish() {
        // Change 'https://example.com' to the actual URL you want to redirect to
        window.location.href = '../../english/english1.html';
    }

</script>

<div class="layer" id="layer1" style="position: relative; top: 60px;">
 <label for="jumpToQuestion"></label>
    <input type="number" id="jumpToQuestion" min="1">
<button class="btn btn-primary" onclick="jumpToQuestion()">Jump</button>
  <div class="question-container" id="question-container">
<div id="totalQuestions"><span id="totalQuestionCount"></span></div>
    <hr>
    <div id="question" class="h2"></div>
    <div id="options" class="mt-4 h3"></div>
    <div class="btn-container">
      <button class="btn btn-primary" onclick="showPreviousQuestion()" style="display: none;">Previous</button>
      <button class="btn btn-success" onclick="showAnswer()" style="display: none;">Open</button>
      <button class="btn btn-primary" onclick="showNextQuestion()" style="display: none;">Next</button>
    </div>
    <div class="explanation"></div>
  </div>
</div>
</div>
<script>
  let currentQuestionIndex = 0;
  const questionContainer = document.getElementById('question-container');
  const questionElement = document.getElementById('question');
  const optionsElement = document.getElementById('options');

  function showQuestion() {
    const currentQuestion = questions[currentQuestionIndex];
    questionElement.textContent = `Question ${currentQuestionIndex + 1}: ${currentQuestion.question}`;

    const optionsHTML = currentQuestion.options.map((option, index) => {
      return `
        <div class="form-check">
          <input class="form-check-input" type="radio" name="option" value="${index}" id="option${index}">
          <label class="form-check-label" for="option${index}">
            ${option}
          </label>
        </div>`;
    }).join('');

    optionsElement.innerHTML = optionsHTML;
  }

  function showNextQuestion() {
    if (currentQuestionIndex < questions.length - 1) {
      resetQuestionContainer();
      currentQuestionIndex++;
      showQuestion();
    }
  }

function showPreviousQuestion() {
    resetQuestionContainer();
    if (populateBookmarkedQuestions) {
        const bookmarkedIndices = getBookmarkedIndices();
        if (bookmarkedIndices.length > 0) {
            // Find the nearest previous bookmarked question index
            let nearestIndex = -1;
            for (let i = bookmarkedIndices.length - 1; i >= 0; i--) {
                if (bookmarkedIndices[i] < currentQuestionIndex) {
                    nearestIndex = i;
                    break;
                }
            }
            // Update current bookmark index
            if (nearestIndex !== -1) {
                currentBookmarkIndex = nearestIndex;
                currentQuestionIndex = bookmarkedIndices[currentBookmarkIndex];
            }
        }
    } else {
        currentQuestionIndex = (currentQuestionIndex - 1 + questions.length) % questions.length;
    }
    showQuestion();
}

function showAnswer() {
  const selectedOption = document.querySelector('input[name="option"]:checked');
  if (selectedOption) {
    const currentQuestion = questions[currentQuestionIndex];
    const isCorrect = currentQuestion.correctOption === currentQuestion.options[parseInt(selectedOption.value)];

    // Display selected option
    const label = selectedOption.parentElement.querySelector('.form-check-label');
    label.innerHTML += isCorrect ? ' <i class="fas fa-check text-success"></i>' : ' <i class="fas fa-times text-danger"></i>';

    // Display correct option
    const correctOptionIndex = currentQuestion.options.findIndex(option => option === currentQuestion.correctOption);
    const correctOptionLabel = document.querySelector(`#option${correctOptionIndex} + .form-check-label`);
    correctOptionLabel.innerHTML += ' <span class="text-info">(Correct)</span>';

    // Display explanation
    const explanation = document.createElement('p');
    explanation.innerHTML = ``;
    optionsElement.appendChild(explanation);
	 
  }
}

function resetQuestionContainer() {
    questionContainer.classList.remove('current-question');
    setTimeout(() => {
      questionContainer.classList.add('current-question');
    }, 10); // Small delay to ensure smooth transition
  }

document.addEventListener('keydown', function(event) {
  switch (event.key) {
    case 'ArrowLeft':
      showPreviousQuestion();
      break;
    case 'ArrowRight':
      showNextQuestion();
      break;
    case 'ArrowUp':
      showAnswer();
      break;
    case '1':
    case '2':
    case '3':
    case '4':
      // Convert the key to an index (0-based)
      const index = parseInt(event.key) - 1;
      const radios = document.getElementsByName('option');
      if (index >= 0 && index < radios.length) {
        radios[index].checked = true;
      }
      break;
    default:
      break;
  }
});

let touchStartX = 0;
let touchStartY = 0;
let touchEndX = 0;
let touchEndY = 0;
let isSwipe = false;

document.addEventListener('touchstart', function(event) {
  touchStartX = event.touches[0].clientX;
  touchStartY = event.touches[0].clientY;
  isSwipe = false; // Reset the flag for each touchstart
});

document.addEventListener('touchmove', function(event) {
  touchEndX = event.touches[0].clientX;
  touchEndY = event.touches[0].clientY;

  // Calculate the distance moved in the X and Y directions
  const deltaX = touchEndX - touchStartX;
  const deltaY = touchEndY - touchStartY;

  // If the distance moved in the X direction is greater than the threshold, consider it a swipe
  if (Math.abs(deltaX) > 10) {
    isSwipe = true;
  }
});

document.addEventListener('touchend', function(event) {
  if (isSwipe) {
    const deltaX = touchEndX - touchStartX;
    const deltaY = touchEndY - touchStartY;

    const touchSensitivity = 50; // Adjust as needed

    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > touchSensitivity) {
      if (deltaX > 0) {
        // Swipe right (previous question)
        showPreviousQuestion();
      } else {
        // Swipe left (next question)
        showNextQuestion();
      }
    } else if (Math.abs(deltaY) > touchSensitivity) {
      if (deltaY < 0) {
        // Swipe up (open answer)
        showAnswer();
      }
    }
  }
});
  
function jumpToQuestion() {
  const jumpInput = document.getElementById('jumpToQuestion');
  const questionNumber = parseInt(jumpInput.value);
  if (!isNaN(questionNumber) && questionNumber >= 1 && questionNumber <= questions.length) {
    currentQuestionIndex = questionNumber - 1;
    showQuestion();
  } else {
    alert('Please enter a valid question number between 1 and ' + questions.length);
  }
}
</script>

<script>
const questions = [
{
    "question": "113. Which of the following is known as animal starch?",
    "options": ["Glycogen", "Cellulose", "Glucose", "Chitin"],
    "correctOption": "Glycogen"
  },



      // Add more questions as needed
];

showQuestion(); // Initial display of the first question
 function updateTotalQuestionCount() {
      const totalQuestionCount = questions.length;
      document.getElementById('totalQuestionCount').textContent = totalQuestionCount;
    }

    // Call the function to update total question count initially
    updateTotalQuestionCount();
</script>
</body>
</html>
